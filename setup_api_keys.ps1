# Str8ZeROCLI API Key Setup Script
Write-Host "`nüîë Str8ZeROCLI API Key Setup" -ForegroundColor Cyan

# 1. Define paths
$installPath = "$env:USERPROFILE\Str8ZeROCLI"
$envPath = "$installPath\.env"
$keysDir = "$installPath\.keys"

# 2. Check if installation exists
if (!(Test-Path $installPath)) {
    Write-Host "‚ùå Str8ZeROCLI is not installed. Please run setup-str8zero.ps1 first." -ForegroundColor Red
    exit 1
}

# 3. Create keys directory if it doesn't exist
if (!(Test-Path $keysDir)) {
    New-Item -ItemType Directory -Path $keysDir -Force | Out-Null
}

# 4. Create or load .env file
if (!(Test-Path $envPath)) {
    @"
# Str8ZeROCLI API Keys
# Generated by setup_api_keys.ps1
"@ | Set-Content $envPath
}

# 5. Function to add or update API key
function Set-ApiKey {
    param (
        [string]$ServiceName,
        [string]$EnvVarName,
        [string]$ApiKey,
        [string]$KeyFile
    )
    
    # Save to .env file
    $envContent = Get-Content $envPath -Raw
    if ($envContent -match "$EnvVarName=.+") {
        $envContent = $envContent -replace "$EnvVarName=.+", "$EnvVarName=$ApiKey"
    } else {
        $envContent += "`n$EnvVarName=$ApiKey"
    }
    $envContent | Set-Content $envPath
    
    # Save to keys directory
    $ApiKey | Set-Content $KeyFile
    
    Write-Host "‚úÖ $ServiceName API key saved successfully" -ForegroundColor Green
}

# 6. Function to get API key from user
function Get-ApiKeyFromUser {
    param (
        [string]$ServiceName,
        [string]$EnvVarName,
        [string]$Url
    )
    
    Write-Host "`nüìù $ServiceName API Key" -ForegroundColor Yellow
    Write-Host "1. Go to $Url"
    Write-Host "2. Sign up or log in to your account"
    Write-Host "3. Create a new API key"
    Write-Host "4. Copy the key"
    
    # Open the website
    Start-Process $Url
    
    # Ask for the API key
    $apiKey = Read-Host "Enter your $ServiceName API key (press Enter to skip)"
    
    if ($apiKey) {
        $keyFile = "$keysDir\$($ServiceName.ToLower() -replace ' ', '_').key"
        Set-ApiKey -ServiceName $ServiceName -EnvVarName $EnvVarName -ApiKey $apiKey -KeyFile $keyFile
    } else {
        Write-Host "‚è≠Ô∏è Skipped $ServiceName API key setup" -ForegroundColor Yellow
    }
}

# 7. Setup API keys for various services
$services = @(
    @{
        Name = "OpenAI"
        EnvVar = "OPENAI_API_KEY"
        Url = "https://platform.openai.com/account/api-keys"
    },
    @{
        Name = "Google Gemini"
        EnvVar = "GEMINI_API_KEY"
        Url = "https://makersuite.google.com/app/apikey"
    },
    @{
        Name = "Anthropic Claude"
        EnvVar = "CLAUDE_API_KEY"
        Url = "https://console.anthropic.com/account/keys"
    },
    @{
        Name = "Hugging Face"
        EnvVar = "HUGGINGFACE_API_KEY"
        Url = "https://huggingface.co/settings/tokens"
    },
    @{
        Name = "Replicate"
        EnvVar = "REPLICATE_API_KEY"
        Url = "https://replicate.com/account/api-tokens"
    },
    @{
        Name = "Stability AI"
        EnvVar = "STABILITY_API_KEY"
        Url = "https://platform.stability.ai/account/keys"
    }
)

# 8. Ask user which service to set up
Write-Host "`nüîë Available API Services:" -ForegroundColor Cyan
for ($i = 0; $i -lt $services.Count; $i++) {
    Write-Host "[$($i+1)] $($services[$i].Name)"
}
Write-Host "[A] All services"
Write-Host "[Q] Quit"

$choice = Read-Host "Select a service to set up (1-$($services.Count), A, or Q)"

if ($choice -eq "Q") {
    Write-Host "`nüëã Exiting API key setup" -ForegroundColor Yellow
    exit 0
} elseif ($choice -eq "A") {
    # Setup all services
    foreach ($service in $services) {
        Get-ApiKeyFromUser -ServiceName $service.Name -EnvVarName $service.EnvVar -Url $service.Url
    }
} elseif ($choice -match "^\d+$" -and [int]$choice -ge 1 -and [int]$choice -le $services.Count) {
    # Setup selected service
    $service = $services[[int]$choice-1]
    Get-ApiKeyFromUser -ServiceName $service.Name -EnvVarName $service.EnvVar -Url $service.Url
} else {
    Write-Host "‚ùå Invalid choice" -ForegroundColor Red
    exit 1
}

Write-Host "`n‚úÖ API key setup complete" -ForegroundColor Green
Write-Host "   Your API keys are stored in $envPath and $keysDir" -ForegroundColor Yellow
Write-Host "   These locations are excluded from git by default" -ForegroundColor Yellow