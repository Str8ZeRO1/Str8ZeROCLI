#!/bin/bash
# Str8ZeROCLI API Key Setup Script

echo -e "\nüîë Str8ZeROCLI API Key Setup"

# 1. Define paths
INSTALL_PATH="$HOME/Str8ZeROCLI"
ENV_PATH="$INSTALL_PATH/.env"
KEYS_DIR="$INSTALL_PATH/.keys"

# 2. Check if installation exists
if [ ! -d "$INSTALL_PATH" ]; then
    echo "‚ùå Str8ZeROCLI is not installed. Please run install.sh first."
    exit 1
fi

# 3. Create keys directory if it doesn't exist
mkdir -p "$KEYS_DIR"

# 4. Create or load .env file
if [ ! -f "$ENV_PATH" ]; then
    cat > "$ENV_PATH" << EOL
# Str8ZeROCLI API Keys
# Generated by setup_api_keys.sh
EOL
fi

# 5. Function to add or update API key
set_api_key() {
    local service_name="$1"
    local env_var_name="$2"
    local api_key="$3"
    local key_file="$4"
    
    # Save to .env file
    if grep -q "$env_var_name=" "$ENV_PATH"; then
        sed -i "s/$env_var_name=.*/$env_var_name=$api_key/" "$ENV_PATH"
    else
        echo "$env_var_name=$api_key" >> "$ENV_PATH"
    fi
    
    # Save to keys directory
    echo "$api_key" > "$key_file"
    
    echo "‚úÖ $service_name API key saved successfully"
}

# 6. Function to get API key from user
get_api_key_from_user() {
    local service_name="$1"
    local env_var_name="$2"
    local url="$3"
    
    echo -e "\nüìù $service_name API Key"
    echo "1. Go to $url"
    echo "2. Sign up or log in to your account"
    echo "3. Create a new API key"
    echo "4. Copy the key"
    
    # Open the website
    if command -v xdg-open &> /dev/null; then
        xdg-open "$url" &> /dev/null
    elif command -v open &> /dev/null; then
        open "$url" &> /dev/null
    fi
    
    # Ask for the API key
    read -p "Enter your $service_name API key (press Enter to skip): " api_key
    
    if [ -n "$api_key" ]; then
        local key_file="$KEYS_DIR/${service_name,,}"
        key_file="${key_file// /_}.key"
        set_api_key "$service_name" "$env_var_name" "$api_key" "$key_file"
    else
        echo "‚è≠Ô∏è Skipped $service_name API key setup"
    fi
}

# 7. Setup API keys for various services
declare -a services=(
    "OpenAI|OPENAI_API_KEY|https://platform.openai.com/account/api-keys"
    "Google Gemini|GEMINI_API_KEY|https://makersuite.google.com/app/apikey"
    "Anthropic Claude|CLAUDE_API_KEY|https://console.anthropic.com/account/keys"
    "Hugging Face|HUGGINGFACE_API_KEY|https://huggingface.co/settings/tokens"
    "Replicate|REPLICATE_API_KEY|https://replicate.com/account/api-tokens"
    "Stability AI|STABILITY_API_KEY|https://platform.stability.ai/account/keys"
)

# 8. Ask user which service to set up
echo -e "\nüîë Available API Services:"
for i in "${!services[@]}"; do
    IFS="|" read -r name _ _ <<< "${services[$i]}"
    echo "[$((i+1))] $name"
done
echo "[A] All services"
echo "[Q] Quit"

read -p "Select a service to set up (1-${#services[@]}, A, or Q): " choice

if [ "$choice" = "Q" ] || [ "$choice" = "q" ]; then
    echo -e "\nüëã Exiting API key setup"
    exit 0
elif [ "$choice" = "A" ] || [ "$choice" = "a" ]; then
    # Setup all services
    for service in "${services[@]}"; do
        IFS="|" read -r name env_var url <<< "$service"
        get_api_key_from_user "$name" "$env_var" "$url"
    done
elif [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#services[@]}" ]; then
    # Setup selected service
    IFS="|" read -r name env_var url <<< "${services[$((choice-1))]}"
    get_api_key_from_user "$name" "$env_var" "$url"
else
    echo "‚ùå Invalid choice"
    exit 1
fi

echo -e "\n‚úÖ API key setup complete"
echo "   Your API keys are stored in $ENV_PATH and $KEYS_DIR"
echo "   These locations are excluded from git by default"